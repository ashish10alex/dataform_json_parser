/*
Copyright Â© 2024 NAME HERE <EMAIL ADDRESS>
*/
package cmd

import (
	"errors"
	"fmt"
	"github.com/ashish10alex/dj/internal/version"
	"github.com/spf13/cobra"
	"os"
)

const COST_IN_POUNDS_FOR_TERRABYTE float32 = 4.9

var JsonFile string
var location string
var KeyFile string
var getGcpProjectId bool
var getGitRepository bool
var getVersionInfo bool
var ErrorTableNotFound = errors.New("Table not found")

// rootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "dj",
	Short: "dj is a command line tool to parse Dataform json file generated by running `dataform compile --json` to get insights on cost, errors and other metadata at table and tag level.",
	Long:  ``,
	// Uncomment the following line if your bare application
	// has an action associated with it:
	Run: func(cmd *cobra.Command, args []string) {
		if getGcpProjectId {
			jsonData, err := ReadJson(JsonFile)
			if err != nil {
				fmt.Println(err.Error())
			}
			cmd.Println(jsonData.GetTargetGcpProjectId())
		} else if getGitRepository {
			jsonData, err := ReadJson(JsonFile)
			if err != nil {
				fmt.Println(err.Error())
			}
			cmd.Println(jsonData.GetGitRepository())
		} else if getVersionInfo {
			versionInfo := version.Get()
			fmt.Println(versionInfo.GitVersion)
			fmt.Println(versionInfo.BuildDate)
			fmt.Println(versionInfo.GitCommit, "\n")
		} else {
			cmd.Help()
		}
	},
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := RootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	RootCmd.Flags().BoolVarP(&getVersionInfo, "version", "v", false, "Returns the version of the binary")
	RootCmd.PersistentFlags().StringVarP(&JsonFile, "json-file", "j", "", "Compiled dataform json file generated using dataform compile --json")
	RootCmd.PersistentFlags().StringVarP(&location, "location", "l", "EU", "Location with with BigQuery Client will be created (optional) (default EU)")
	RootCmd.PersistentFlags().StringVarP(&KeyFile, "key-file", "k", "", "GCP key file to use for dry run (optional)")
	RootCmd.Flags().BoolVarP(&getGcpProjectId, "target-gcp-project", "t", false, "Returns the target GCP project id where tables will be created")
	RootCmd.Flags().BoolVarP(&getGitRepository, "target-git-repo", "g", false, "Returns the target git repository where tables will be created")

}
